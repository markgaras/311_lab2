// CMPSC 311 SP22
// LAB 2
// Mark Garas
// Pennsylvania State University
// Computer Science 311

#include <stdio.h>
#include <string.h>
#include <assert.h>
#include "mdadm.h"
#include "jbod.h"

// Defining global variables
int diskLocation, blockLocation, bytesOver;

// Getting the four parameters and constructing a operation from the inputs
uint32_t mdadm_op (uint32_t command, uint32_t diskID, uint32_t reserved, uint32_t blockID) {
	return (blockID) | (reserved << 8) | (diskID << 22) | (command << 26);
}

// Mount function for mounting discs before all else
int mdadm_mount(void) {
	if (jbod_operation(mdadm_op(JBOD_MOUNT, 0, 0, 0), NULL) == JBOD_NO_ERROR) {
		return 1;
	} 
	return -1;
}

// Unmount function for mounting discs after all else
int mdadm_unmount(void) {
  	if (jbod_operation(mdadm_op(JBOD_UNMOUNT, 0, 0, 0), NULL) == JBOD_NO_ERROR) {
		return 1;
	}
	return -1;
}

// The read function that returns true for all cases defined by the problem (including the ones defined in the tester function)
int mdadm_read(uint32_t addr, uint32_t len, uint8_t *buf) {
	//int tempDisks[16], tempBlocks[256], tempBytes[256];
	if (sizeof(len) < 1024 && jbod_operation(JBOD_UNMOUNT, NULL) && sizeof(addr) < sizeof(len) || (addr == 0 && len == 0)) {
	
		/*int diskLocation 
		
		mdadm_op(JBOD_SEEK_TO_DISK, diskID, 0, 0);
		mdadm_op(JBOD_SEEK_TO_DISK, 0, 0, blockID);*/
		
		int temp_addr = addr;
		uint8_t readTo[len];
		
		while (temp_addr < addr + len) {
			setLocation(temp_addr, addr);
			int lengthToRead = 0;
			int stillToBeRead = addr + len - temp_addr;
			mdadm_seek_and_read(readTo[len]);
			if (bytesOver + stillToBeRead > JBOD_BLOCK_SIZE) {
				lengthToRead = JBOD_BLOCK_SIZE - bytesOver;
			}
			else {
				lengthToRead = stillToBeRead;
			}
			
		}
		
		

		return 0;  	
	}
	return -1;
}

void setLocation(int temp_addr, int addr) {
	diskLocation = temp_addr / JBOD_DISK_SIZE;
	blockLocation = temp_addr % JBOD_DISK_SIZE / JBOD_BLOCK_SIZE;
	bytesOver = addr % JBOD_BLOCK_SIZE;
}

void mdadm_seek_and_read(int readTo[]) {
	jbod_operation(mdadm_op(JBOD_SEEK_TO_DISK, diskLocation, 0, 0), NULL);
	jbod_operation(mdadm_op(JBOD_SEEK_TO_BLOCK, 0, 0, blockLocation), NULL);
	jbod_operation(mdadm_op(JBOD_READ_BLOCK, 0, 0, 0), readTo);
}
